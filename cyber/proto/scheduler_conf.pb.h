// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scheduler_conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scheduler_5fconf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scheduler_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "classic_conf.pb.h"
#include "choreography_conf.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scheduler_5fconf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scheduler_5fconf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scheduler_5fconf_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_scheduler_5fconf_2eproto_metadata_getter(int index);
namespace apollo {
namespace cyber {
namespace proto {
class SchedulerConf;
struct SchedulerConfDefaultTypeInternal;
extern SchedulerConfDefaultTypeInternal _SchedulerConf_default_instance_;
}  // namespace proto
}  // namespace cyber
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::cyber::proto::SchedulerConf* Arena::CreateMaybeMessage<::apollo::cyber::proto::SchedulerConf>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace cyber {
namespace proto {

// ===================================================================

class SchedulerConf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.SchedulerConf) */ {
 public:
  inline SchedulerConf() : SchedulerConf(nullptr) {}
  virtual ~SchedulerConf();
  explicit constexpr SchedulerConf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SchedulerConf(const SchedulerConf& from);
  SchedulerConf(SchedulerConf&& from) noexcept
    : SchedulerConf() {
    *this = ::std::move(from);
  }

  inline SchedulerConf& operator=(const SchedulerConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchedulerConf& operator=(SchedulerConf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchedulerConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const SchedulerConf* internal_default_instance() {
    return reinterpret_cast<const SchedulerConf*>(
               &_SchedulerConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SchedulerConf& a, SchedulerConf& b) {
    a.Swap(&b);
  }
  inline void Swap(SchedulerConf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchedulerConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchedulerConf* New() const final {
    return CreateMaybeMessage<SchedulerConf>(nullptr);
  }

  SchedulerConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchedulerConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchedulerConf& from);
  void MergeFrom(const SchedulerConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchedulerConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.cyber.proto.SchedulerConf";
  }
  protected:
  explicit SchedulerConf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_scheduler_5fconf_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolicyFieldNumber = 1,
    kClassicConfFieldNumber = 4,
    kChoreographyConfFieldNumber = 5,
    kRoutineNumFieldNumber = 2,
    kDefaultProcNumFieldNumber = 3,
  };
  // optional string policy = 1;
  bool has_policy() const;
  private:
  bool _internal_has_policy() const;
  public:
  void clear_policy();
  const std::string& policy() const;
  void set_policy(const std::string& value);
  void set_policy(std::string&& value);
  void set_policy(const char* value);
  void set_policy(const char* value, size_t size);
  std::string* mutable_policy();
  std::string* release_policy();
  void set_allocated_policy(std::string* policy);
  private:
  const std::string& _internal_policy() const;
  void _internal_set_policy(const std::string& value);
  std::string* _internal_mutable_policy();
  public:

  // optional .apollo.cyber.proto.ClassicConf classic_conf = 4;
  bool has_classic_conf() const;
  private:
  bool _internal_has_classic_conf() const;
  public:
  void clear_classic_conf();
  const ::apollo::cyber::proto::ClassicConf& classic_conf() const;
  ::apollo::cyber::proto::ClassicConf* release_classic_conf();
  ::apollo::cyber::proto::ClassicConf* mutable_classic_conf();
  void set_allocated_classic_conf(::apollo::cyber::proto::ClassicConf* classic_conf);
  private:
  const ::apollo::cyber::proto::ClassicConf& _internal_classic_conf() const;
  ::apollo::cyber::proto::ClassicConf* _internal_mutable_classic_conf();
  public:
  void unsafe_arena_set_allocated_classic_conf(
      ::apollo::cyber::proto::ClassicConf* classic_conf);
  ::apollo::cyber::proto::ClassicConf* unsafe_arena_release_classic_conf();

  // optional .apollo.cyber.proto.ChoreographyConf choreography_conf = 5;
  bool has_choreography_conf() const;
  private:
  bool _internal_has_choreography_conf() const;
  public:
  void clear_choreography_conf();
  const ::apollo::cyber::proto::ChoreographyConf& choreography_conf() const;
  ::apollo::cyber::proto::ChoreographyConf* release_choreography_conf();
  ::apollo::cyber::proto::ChoreographyConf* mutable_choreography_conf();
  void set_allocated_choreography_conf(::apollo::cyber::proto::ChoreographyConf* choreography_conf);
  private:
  const ::apollo::cyber::proto::ChoreographyConf& _internal_choreography_conf() const;
  ::apollo::cyber::proto::ChoreographyConf* _internal_mutable_choreography_conf();
  public:
  void unsafe_arena_set_allocated_choreography_conf(
      ::apollo::cyber::proto::ChoreographyConf* choreography_conf);
  ::apollo::cyber::proto::ChoreographyConf* unsafe_arena_release_choreography_conf();

  // optional uint32 routine_num = 2;
  bool has_routine_num() const;
  private:
  bool _internal_has_routine_num() const;
  public:
  void clear_routine_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 routine_num() const;
  void set_routine_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_routine_num() const;
  void _internal_set_routine_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 default_proc_num = 3;
  bool has_default_proc_num() const;
  private:
  bool _internal_has_default_proc_num() const;
  public:
  void clear_default_proc_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 default_proc_num() const;
  void set_default_proc_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_default_proc_num() const;
  void _internal_set_default_proc_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.SchedulerConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr policy_;
  ::apollo::cyber::proto::ClassicConf* classic_conf_;
  ::apollo::cyber::proto::ChoreographyConf* choreography_conf_;
  ::PROTOBUF_NAMESPACE_ID::uint32 routine_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 default_proc_num_;
  friend struct ::TableStruct_scheduler_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SchedulerConf

// optional string policy = 1;
inline bool SchedulerConf::_internal_has_policy() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SchedulerConf::has_policy() const {
  return _internal_has_policy();
}
inline void SchedulerConf::clear_policy() {
  policy_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SchedulerConf::policy() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SchedulerConf.policy)
  return _internal_policy();
}
inline void SchedulerConf::set_policy(const std::string& value) {
  _internal_set_policy(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SchedulerConf.policy)
}
inline std::string* SchedulerConf::mutable_policy() {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.SchedulerConf.policy)
  return _internal_mutable_policy();
}
inline const std::string& SchedulerConf::_internal_policy() const {
  return policy_.Get();
}
inline void SchedulerConf::_internal_set_policy(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  policy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchedulerConf::set_policy(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  policy_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.SchedulerConf.policy)
}
inline void SchedulerConf::set_policy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  policy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.SchedulerConf.policy)
}
inline void SchedulerConf::set_policy(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  policy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.SchedulerConf.policy)
}
inline std::string* SchedulerConf::_internal_mutable_policy() {
  _has_bits_[0] |= 0x00000001u;
  return policy_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchedulerConf::release_policy() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.SchedulerConf.policy)
  if (!_internal_has_policy()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return policy_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchedulerConf::set_allocated_policy(std::string* policy) {
  if (policy != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  policy_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), policy,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.SchedulerConf.policy)
}

// optional uint32 routine_num = 2;
inline bool SchedulerConf::_internal_has_routine_num() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SchedulerConf::has_routine_num() const {
  return _internal_has_routine_num();
}
inline void SchedulerConf::clear_routine_num() {
  routine_num_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchedulerConf::_internal_routine_num() const {
  return routine_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchedulerConf::routine_num() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SchedulerConf.routine_num)
  return _internal_routine_num();
}
inline void SchedulerConf::_internal_set_routine_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  routine_num_ = value;
}
inline void SchedulerConf::set_routine_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_routine_num(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SchedulerConf.routine_num)
}

// optional uint32 default_proc_num = 3;
inline bool SchedulerConf::_internal_has_default_proc_num() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SchedulerConf::has_default_proc_num() const {
  return _internal_has_default_proc_num();
}
inline void SchedulerConf::clear_default_proc_num() {
  default_proc_num_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchedulerConf::_internal_default_proc_num() const {
  return default_proc_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchedulerConf::default_proc_num() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SchedulerConf.default_proc_num)
  return _internal_default_proc_num();
}
inline void SchedulerConf::_internal_set_default_proc_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  default_proc_num_ = value;
}
inline void SchedulerConf::set_default_proc_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_default_proc_num(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SchedulerConf.default_proc_num)
}

// optional .apollo.cyber.proto.ClassicConf classic_conf = 4;
inline bool SchedulerConf::_internal_has_classic_conf() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || classic_conf_ != nullptr);
  return value;
}
inline bool SchedulerConf::has_classic_conf() const {
  return _internal_has_classic_conf();
}
inline const ::apollo::cyber::proto::ClassicConf& SchedulerConf::_internal_classic_conf() const {
  const ::apollo::cyber::proto::ClassicConf* p = classic_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::cyber::proto::ClassicConf&>(
      ::apollo::cyber::proto::_ClassicConf_default_instance_);
}
inline const ::apollo::cyber::proto::ClassicConf& SchedulerConf::classic_conf() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SchedulerConf.classic_conf)
  return _internal_classic_conf();
}
inline void SchedulerConf::unsafe_arena_set_allocated_classic_conf(
    ::apollo::cyber::proto::ClassicConf* classic_conf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(classic_conf_);
  }
  classic_conf_ = classic_conf;
  if (classic_conf) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.cyber.proto.SchedulerConf.classic_conf)
}
inline ::apollo::cyber::proto::ClassicConf* SchedulerConf::release_classic_conf() {
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::cyber::proto::ClassicConf* temp = classic_conf_;
  classic_conf_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::cyber::proto::ClassicConf* SchedulerConf::unsafe_arena_release_classic_conf() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.SchedulerConf.classic_conf)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::cyber::proto::ClassicConf* temp = classic_conf_;
  classic_conf_ = nullptr;
  return temp;
}
inline ::apollo::cyber::proto::ClassicConf* SchedulerConf::_internal_mutable_classic_conf() {
  _has_bits_[0] |= 0x00000002u;
  if (classic_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::cyber::proto::ClassicConf>(GetArena());
    classic_conf_ = p;
  }
  return classic_conf_;
}
inline ::apollo::cyber::proto::ClassicConf* SchedulerConf::mutable_classic_conf() {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.SchedulerConf.classic_conf)
  return _internal_mutable_classic_conf();
}
inline void SchedulerConf::set_allocated_classic_conf(::apollo::cyber::proto::ClassicConf* classic_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(classic_conf_);
  }
  if (classic_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(classic_conf)->GetArena();
    if (message_arena != submessage_arena) {
      classic_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, classic_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  classic_conf_ = classic_conf;
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.SchedulerConf.classic_conf)
}

// optional .apollo.cyber.proto.ChoreographyConf choreography_conf = 5;
inline bool SchedulerConf::_internal_has_choreography_conf() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || choreography_conf_ != nullptr);
  return value;
}
inline bool SchedulerConf::has_choreography_conf() const {
  return _internal_has_choreography_conf();
}
inline const ::apollo::cyber::proto::ChoreographyConf& SchedulerConf::_internal_choreography_conf() const {
  const ::apollo::cyber::proto::ChoreographyConf* p = choreography_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::cyber::proto::ChoreographyConf&>(
      ::apollo::cyber::proto::_ChoreographyConf_default_instance_);
}
inline const ::apollo::cyber::proto::ChoreographyConf& SchedulerConf::choreography_conf() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SchedulerConf.choreography_conf)
  return _internal_choreography_conf();
}
inline void SchedulerConf::unsafe_arena_set_allocated_choreography_conf(
    ::apollo::cyber::proto::ChoreographyConf* choreography_conf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(choreography_conf_);
  }
  choreography_conf_ = choreography_conf;
  if (choreography_conf) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.cyber.proto.SchedulerConf.choreography_conf)
}
inline ::apollo::cyber::proto::ChoreographyConf* SchedulerConf::release_choreography_conf() {
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::cyber::proto::ChoreographyConf* temp = choreography_conf_;
  choreography_conf_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::cyber::proto::ChoreographyConf* SchedulerConf::unsafe_arena_release_choreography_conf() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.SchedulerConf.choreography_conf)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::cyber::proto::ChoreographyConf* temp = choreography_conf_;
  choreography_conf_ = nullptr;
  return temp;
}
inline ::apollo::cyber::proto::ChoreographyConf* SchedulerConf::_internal_mutable_choreography_conf() {
  _has_bits_[0] |= 0x00000004u;
  if (choreography_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::cyber::proto::ChoreographyConf>(GetArena());
    choreography_conf_ = p;
  }
  return choreography_conf_;
}
inline ::apollo::cyber::proto::ChoreographyConf* SchedulerConf::mutable_choreography_conf() {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.SchedulerConf.choreography_conf)
  return _internal_mutable_choreography_conf();
}
inline void SchedulerConf::set_allocated_choreography_conf(::apollo::cyber::proto::ChoreographyConf* choreography_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(choreography_conf_);
  }
  if (choreography_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(choreography_conf)->GetArena();
    if (message_arena != submessage_arena) {
      choreography_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, choreography_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  choreography_conf_ = choreography_conf;
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.SchedulerConf.choreography_conf)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cyber
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scheduler_5fconf_2eproto
