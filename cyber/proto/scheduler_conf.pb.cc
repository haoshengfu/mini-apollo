// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scheduler_conf.proto

#include "scheduler_conf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace apollo {
namespace cyber {
namespace proto {
constexpr SchedulerConf::SchedulerConf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : policy_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , classic_conf_(nullptr)
  , choreography_conf_(nullptr)
  , routine_num_(0u)
  , default_proc_num_(0u){}
struct SchedulerConfDefaultTypeInternal {
  constexpr SchedulerConfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchedulerConfDefaultTypeInternal() {}
  union {
    SchedulerConf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchedulerConfDefaultTypeInternal _SchedulerConf_default_instance_;
}  // namespace proto
}  // namespace cyber
}  // namespace apollo
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scheduler_5fconf_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_scheduler_5fconf_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scheduler_5fconf_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scheduler_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::SchedulerConf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::SchedulerConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::SchedulerConf, policy_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::SchedulerConf, routine_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::SchedulerConf, default_proc_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::SchedulerConf, classic_conf_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::SchedulerConf, choreography_conf_),
  0,
  3,
  4,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::apollo::cyber::proto::SchedulerConf)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::cyber::proto::_SchedulerConf_default_instance_),
};

const char descriptor_table_protodef_scheduler_5fconf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024scheduler_conf.proto\022\022apollo.cyber.pro"
  "to\032\022classic_conf.proto\032\027choreography_con"
  "f.proto\"\306\001\n\rSchedulerConf\022\016\n\006policy\030\001 \001("
  "\t\022\023\n\013routine_num\030\002 \001(\r\022\030\n\020default_proc_n"
  "um\030\003 \001(\r\0225\n\014classic_conf\030\004 \001(\0132\037.apollo."
  "cyber.proto.ClassicConf\022\?\n\021choreography_"
  "conf\030\005 \001(\0132$.apollo.cyber.proto.Choreogr"
  "aphyConf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scheduler_5fconf_2eproto_deps[2] = {
  &::descriptor_table_choreography_5fconf_2eproto,
  &::descriptor_table_classic_5fconf_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scheduler_5fconf_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scheduler_5fconf_2eproto = {
  false, false, 288, descriptor_table_protodef_scheduler_5fconf_2eproto, "scheduler_conf.proto", 
  &descriptor_table_scheduler_5fconf_2eproto_once, descriptor_table_scheduler_5fconf_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_scheduler_5fconf_2eproto::offsets,
  file_level_metadata_scheduler_5fconf_2eproto, file_level_enum_descriptors_scheduler_5fconf_2eproto, file_level_service_descriptors_scheduler_5fconf_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_scheduler_5fconf_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scheduler_5fconf_2eproto);
  return descriptor_table_scheduler_5fconf_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_scheduler_5fconf_2eproto(&descriptor_table_scheduler_5fconf_2eproto);
namespace apollo {
namespace cyber {
namespace proto {

// ===================================================================

class SchedulerConf::_Internal {
 public:
  using HasBits = decltype(std::declval<SchedulerConf>()._has_bits_);
  static void set_has_policy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_routine_num(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_default_proc_num(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::cyber::proto::ClassicConf& classic_conf(const SchedulerConf* msg);
  static void set_has_classic_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::cyber::proto::ChoreographyConf& choreography_conf(const SchedulerConf* msg);
  static void set_has_choreography_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::cyber::proto::ClassicConf&
SchedulerConf::_Internal::classic_conf(const SchedulerConf* msg) {
  return *msg->classic_conf_;
}
const ::apollo::cyber::proto::ChoreographyConf&
SchedulerConf::_Internal::choreography_conf(const SchedulerConf* msg) {
  return *msg->choreography_conf_;
}
void SchedulerConf::clear_classic_conf() {
  if (classic_conf_ != nullptr) classic_conf_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SchedulerConf::clear_choreography_conf() {
  if (choreography_conf_ != nullptr) choreography_conf_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
SchedulerConf::SchedulerConf(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.cyber.proto.SchedulerConf)
}
SchedulerConf::SchedulerConf(const SchedulerConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  policy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_policy()) {
    policy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_policy(), 
      GetArena());
  }
  if (from._internal_has_classic_conf()) {
    classic_conf_ = new ::apollo::cyber::proto::ClassicConf(*from.classic_conf_);
  } else {
    classic_conf_ = nullptr;
  }
  if (from._internal_has_choreography_conf()) {
    choreography_conf_ = new ::apollo::cyber::proto::ChoreographyConf(*from.choreography_conf_);
  } else {
    choreography_conf_ = nullptr;
  }
  ::memcpy(&routine_num_, &from.routine_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&default_proc_num_) -
    reinterpret_cast<char*>(&routine_num_)) + sizeof(default_proc_num_));
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.SchedulerConf)
}

void SchedulerConf::SharedCtor() {
policy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&classic_conf_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&default_proc_num_) -
    reinterpret_cast<char*>(&classic_conf_)) + sizeof(default_proc_num_));
}

SchedulerConf::~SchedulerConf() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.SchedulerConf)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SchedulerConf::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  policy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete classic_conf_;
  if (this != internal_default_instance()) delete choreography_conf_;
}

void SchedulerConf::ArenaDtor(void* object) {
  SchedulerConf* _this = reinterpret_cast< SchedulerConf* >(object);
  (void)_this;
}
void SchedulerConf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchedulerConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchedulerConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.SchedulerConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      policy_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(classic_conf_ != nullptr);
      classic_conf_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(choreography_conf_ != nullptr);
      choreography_conf_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&routine_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&default_proc_num_) -
        reinterpret_cast<char*>(&routine_num_)) + sizeof(default_proc_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchedulerConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string policy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_policy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.cyber.proto.SchedulerConf.policy");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 routine_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_routine_num(&has_bits);
          routine_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 default_proc_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_default_proc_num(&has_bits);
          default_proc_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.cyber.proto.ClassicConf classic_conf = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_classic_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.cyber.proto.ChoreographyConf choreography_conf = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_choreography_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SchedulerConf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.SchedulerConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string policy = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_policy().data(), static_cast<int>(this->_internal_policy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.SchedulerConf.policy");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_policy(), target);
  }

  // optional uint32 routine_num = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_routine_num(), target);
  }

  // optional uint32 default_proc_num = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_default_proc_num(), target);
  }

  // optional .apollo.cyber.proto.ClassicConf classic_conf = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::classic_conf(this), target, stream);
  }

  // optional .apollo.cyber.proto.ChoreographyConf choreography_conf = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::choreography_conf(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.SchedulerConf)
  return target;
}

size_t SchedulerConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.SchedulerConf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string policy = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_policy());
    }

    // optional .apollo.cyber.proto.ClassicConf classic_conf = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *classic_conf_);
    }

    // optional .apollo.cyber.proto.ChoreographyConf choreography_conf = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *choreography_conf_);
    }

    // optional uint32 routine_num = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_routine_num());
    }

    // optional uint32 default_proc_num = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_default_proc_num());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchedulerConf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.SchedulerConf)
  GOOGLE_DCHECK_NE(&from, this);
  const SchedulerConf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SchedulerConf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.SchedulerConf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.SchedulerConf)
    MergeFrom(*source);
  }
}

void SchedulerConf::MergeFrom(const SchedulerConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.SchedulerConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_policy(from._internal_policy());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_classic_conf()->::apollo::cyber::proto::ClassicConf::MergeFrom(from._internal_classic_conf());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_choreography_conf()->::apollo::cyber::proto::ChoreographyConf::MergeFrom(from._internal_choreography_conf());
    }
    if (cached_has_bits & 0x00000008u) {
      routine_num_ = from.routine_num_;
    }
    if (cached_has_bits & 0x00000010u) {
      default_proc_num_ = from.default_proc_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SchedulerConf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.SchedulerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchedulerConf::CopyFrom(const SchedulerConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.SchedulerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchedulerConf::IsInitialized() const {
  if (_internal_has_classic_conf()) {
    if (!classic_conf_->IsInitialized()) return false;
  }
  return true;
}

void SchedulerConf::InternalSwap(SchedulerConf* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  policy_.Swap(&other->policy_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SchedulerConf, default_proc_num_)
      + sizeof(SchedulerConf::default_proc_num_)
      - PROTOBUF_FIELD_OFFSET(SchedulerConf, classic_conf_)>(
          reinterpret_cast<char*>(&classic_conf_),
          reinterpret_cast<char*>(&other->classic_conf_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SchedulerConf::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace cyber
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::cyber::proto::SchedulerConf* Arena::CreateMaybeMessage< ::apollo::cyber::proto::SchedulerConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::cyber::proto::SchedulerConf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
