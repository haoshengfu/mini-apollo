
#ifndef CYBER_NODE_NODE_SERVICE_IMPL_H_
#define CYBER_NODE_NODE_SERVICE_IMPL_H_

#include <memory>
#include <string>
#include <vector>

#include "../common/global_data.h"
#include "../service/client.h"
#include "../service/service.h"

namespace apollo {
namespace cyber {

class Node;

class NodeServiceImpl {
public:
 friend class Node;
 explicit NodeServiceImpl(const std::string& node_name)
     : node_name_(node_name) {
   attr_.set_host_name(common::GlobalData::Instance()->HostName());
   attr_.set_process_id(common::GlobalData::Instance()->ProcessId());
   attr_.set_node_name(node_name);
   auto node_id = common::GlobalData::RegisterNode(node_name);
   attr_.set_node_id(node_id);
 }

 NodeServiceImpl() = delete;

 ~NodeServiceImpl() {}

private:
 template <typename Request, typename Response>
 auto CreateService(const std::string& service_name,
                    const typename Service<Request, Response>::ServiceCallback&
                        service_calllback) ->
     typename std::shared_ptr<Service<Request, Response>>;

 template <typename Request, typename Response>
 auto CreateClient(const std::string& service_name) ->
     typename std::shared_ptr<Client<Request, Response>>;

 std::vector<std::weak_ptr<ServiceBase>> service_list_;
 std::vector<std::weak_ptr<ClientBase>> client_list_;
 std::string node_name_;
 proto::RoleAttributes attr_;
};


}  // namespace cyber
}  // namespace apollo

#endif  // CYBER_NODE_NODE_SERVICE_IMPL_H_
